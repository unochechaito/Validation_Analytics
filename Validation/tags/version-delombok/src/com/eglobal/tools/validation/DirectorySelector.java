// Generated by delombok at Mon Feb 10 12:47:07 CST 2025
package com.eglobal.tools.validation;

import com.eglobal.tools.parser.utils.FileSystem;
import javax.swing.*;
import java.util.List;
import java.util.ArrayList;
import java.util.function.Consumer;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

public class DirectorySelector {
    private JLabel directoryLabel;
    private JTextField directoryField;
    private JButton directoryButton;
    private Set<String> files;
    private String canonicalDirectoryPathSelected;
    private List<Consumer<String>> directoryChangeListeners = new ArrayList<>();

    public DirectorySelector(String label) {
        files = new HashSet<>();
        directoryLabel = new JLabel(label);
        directoryField = new JTextField();
        directoryField.setEditable(false);
        directoryField.setColumns(20);
        directoryButton = new JButton("...");
        directoryButton.setPreferredSize(new Dimension(30, directoryButton.getPreferredSize().height));
        directoryButton.addActionListener(e -> {
            try {
                selectDirectory();
            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(null, "Error seleccionando directorio: " + ioException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    public void addLabel(JPanel panel, GridBagConstraints gbc) {
        panel.add(directoryLabel, gbc);
    }

    public void addField(JPanel panel, GridBagConstraints gbc) {
        panel.add(directoryField, gbc);
    }

    public void addButton(JPanel panel, GridBagConstraints gbc) {
        panel.add(directoryButton, gbc);
    }

    public void addDirectoryChangeListener(Consumer<String> listener) {
        directoryChangeListeners.add(listener);
    }

    private void notifyDirectoryChangeListeners(String directory) {
        for (Consumer<String> listener : directoryChangeListeners) {
            listener.accept(directory);
        }
    }

    private void selectDirectory() throws IOException {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Seleccione un directorio");
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            files.clear();
            File selectedDir = chooser.getSelectedFile();
            if (selectedDir != null && selectedDir.isDirectory()) {
                if (!FileSystem.isAllowedPath.test(selectedDir.getPath())) {
                    JOptionPane.showMessageDialog(null, "Ruta no permitida: " + selectedDir.getPath(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                directoryField.setText(selectedDir.getCanonicalPath());
                this.canonicalDirectoryPathSelected = selectedDir.getCanonicalPath();
                for (File file : Objects.requireNonNull(selectedDir.listFiles())) {
                    if (file.isFile()) {
                        files.add(file.getName());
                    }
                }
                notifyDirectoryChangeListeners(canonicalDirectoryPathSelected);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un directorio v치lido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    @Deprecated
    private String validateAndNormalizePath(String path) throws IOException {
        try {
            Path dirPath = Paths.get(path).normalize().toAbsolutePath();
            String canonicalPath = dirPath.toFile().getCanonicalPath();
            if (!FileSystem.isAllowedPath.test(canonicalPath)) {
                throw new IOException("Ruta no permitida: " + path);
            }
            return canonicalPath;
        } catch (InvalidPathException e) {
            throw new IOException("Ruta no v치lida: " + path, e);
        }
    }

    @java.lang.SuppressWarnings("all")
    public Set<String> getFiles() {
        return this.files;
    }

    @java.lang.SuppressWarnings("all")
    public String getCanonicalDirectoryPathSelected() {
        return this.canonicalDirectoryPathSelected;
    }
}
//package com.eglobal.tools.validation;
//
//
//import com.eglobal.tools.parser.utils.FileSystem;
//
//
//import javax.swing.*;
//import java.awt.*;
//import java.io.File;
//import java.io.IOException;
//import java.nio.file.InvalidPathException;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.util.HashSet;
//import java.util.Objects;
//import java.util.Set;
//
//
//public class DirectorySelector {
//    private JTextField directoryField;
//    private JButton directoryButton;
//    private Set<String> files;
//
//
//    public DirectorySelector(String label, JPanel panel, int row) {
//        files = new HashSet<>();
//        JLabel directoryLabel = new JLabel(label);
//        GridBagConstraints gbc_label = new GridBagConstraints();
//        gbc_label.insets = new Insets(0, 0, 5, 5);
//        gbc_label.anchor = GridBagConstraints.EAST;
//        gbc_label.gridx = 0;
//        gbc_label.gridy = row;
//        panel.add(directoryLabel, gbc_label);
//
//
//        directoryField = new JTextField();
//        GridBagConstraints gbc_field = new GridBagConstraints();
//        gbc_field.insets = new Insets(0, 0, 5, 5);
//        gbc_field.fill = GridBagConstraints.HORIZONTAL;
//        gbc_field.gridx = 1;
//        gbc_field.gridy = row;
//        panel.add(directoryField, gbc_field);
//        directoryField.setColumns(10);
//
//
//        directoryButton = new JButton("...");
//        directoryButton.addActionListener(e -> {
//            try {
//                selectDirectory();
//            } catch (IOException ioException) {
//                JOptionPane.showMessageDialog(panel, "Error seleccionando directorio: " + ioException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            }
//        });
//        GridBagConstraints gbc_button = new GridBagConstraints();
//        gbc_button.insets = new Insets(0, 0, 5, 0);
//        gbc_button.gridx = 2;
//        gbc_button.gridy = row;
//        panel.add(directoryButton, gbc_button);
//    }
//
//
//    private void selectDirectory() throws IOException {
//        JFileChooser chooser = new JFileChooser();
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        int returnVal = chooser.showOpenDialog(null);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            files.clear();
//            File selectedDir = chooser.getSelectedFile();
//            if (selectedDir != null && selectedDir.isDirectory()) {
//                String canonicalPath = validateAndNormalizePath(selectedDir.getCanonicalPath());
//                directoryField.setText(canonicalPath);
//                for (File file : Objects.requireNonNull(selectedDir.listFiles())) {
//                    if (file.isFile()) {
//                        files.add(file.getName());
//                    }
//                }
//            } else {
//                JOptionPane.showMessageDialog(null, "Por favor, seleccione un directorio v치lido.", "Error", JOptionPane.ERROR_MESSAGE);
//            }
//        }
//    }
//
//
//    private String validateAndNormalizePath(String path) throws IOException {
//        try {
//            Path dirPath = Paths.get(path).normalize().toAbsolutePath();
//            String canonicalPath = dirPath.toFile().getCanonicalPath();
//
//            if (!FileSystem.isAllowedPath.test(canonicalPath)) {
//                throw new IOException("Ruta no permitida: " + path);
//            }
//
//
//            return canonicalPath;
//        } catch (InvalidPathException e) {
//            throw new IOException("Ruta no v치lida: " + path, e);
//        }
//    }
//
//
//    public String getDirectory() {
//        return directoryField.getText();
//    }
//
//
//    public Set<String> getFiles() {
//        return files;
//    }
//}